version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        description: "Workflow ID that the deployment is tagged with"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name frontend-<< parameters.workflow_id >>
            aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        description: "Workflow ID that the deployment is tagged with"
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = $(curl -H "token: fe750e9c-00a2-409b-ac25-17fcf668b46d" --request GET https://api.memstash.io/values/migration-<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend Test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    environment:
      NODE_OPTIONS: --max_old_space_size=8192 
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend Test
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyze Frontend
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Analyze Backend
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --region ${AWS_DEFAULT_REGION} \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:6} \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:6}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:6}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --region ${AWS_DEFAULT_REGION} \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:6} \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:6}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:6}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --region ${AWS_DEFAULT_REGION} \
              --filters "Name=instance-id,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:6}" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text >> .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: fe750e9c-00a2-409b-ac25-17fcf668b46d" --request PUT --data "aws ec2 describe-instances \
              --region ${AWS_DEFAULT_REGION} \
              --filters "Name=instance-id,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:6}" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text" https://api.memstash.io/values/backend-deployed-${CIRCLE_WORKFLOW_ID:0:6}
            echo URL: https://api.memstash.io/values/backend-deployed-${CIRCLE_WORKFLOW_ID:0:6}
      - run:
          name: Add .env vars
          command: |
            echo ENVIRONMENT=development > backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=development >> "backend/.env"
      - persist_to_workspace:
          root: ~/project
          paths:
            - .circleci/ansible/inventory.txt
            - backend/
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:6}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:6}        

  configure-infrastructure:
    docker:
     - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["fb:de:9b:27:f1:a7:ee:8b:59:99:92:b6:22:52:ea:2d"]
      # attach workspace
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar gzip ansible nodejs npm curl
            npm install -g pm2
            pip install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:6}    

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            cat .env
            npm run migrations >> migration_output.txt
            cat migration_output.txt
      - run:
          name: Send migration results to memstash
          command: |
            curl -H "Content-Type: text/plain" -H "token: fe750e9c-00a2-409b-ac25-17fcf668b46d" --request PUT \
              --data "1" https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID:0:6}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:6}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:6}      

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: fe750e9c-00a2-409b-ac25-17fcf668b46d" --request GET https://api.memstash.io/values/backend-deployed-${CIRCLE_WORKFLOW_ID:0:6})
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            aws s3 sync . s3://udapeople-${CIRCLE_WORKFLOW_ID:0:6} --delete
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:6}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:6}    
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["fb:de:9b:27:f1:a7:ee:8b:59:99:92:b6:22:52:ea:2d"]
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl openssh-client
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            tar -C backend -czvf backend_artifact.tar.gz .
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:6}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:6}

  smoke-test:
    docker:
      - image: alpine:latest 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add curl
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: fe750e9c-00a2-409b-ac25-17fcf668b46d" --request GET https://api.memstash.io/values/backend-deployed-${CIRCLE_WORKFLOW_ID:0:6})
            echo "${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo "${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
            curl ${API_URL}
      - run:
          name: Frontend smoke test.
          command: |
            if curl -s  "http://udapeople-${CIRCLE_WORKFLOW_ID:0:6}.s3-website-us-west-2.amazonaws.com" | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:6}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:6}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name production-distro \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:6} \
              --tags project=udapeople
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:6}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:6}

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws cloudformation delete-stack --stack-name "backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "frontend-${OldWorkflowID}"
              aws s3 rm s3://udapeople-${OLD_WORKFLOW_ID} --recursive
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend]
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]